import os
import re

def get_manager_info(filepath):
    """
    Parses a C++ header file to find the class name of the package manager.
    Assumes the class inherits from dev::packages::Manager.
    """
    if not os.path.exists(filepath):
        return None, None

    with open(filepath, 'r') as f:
        content = f.read()
        # Look for "class MyManager final : public Manager"
        match = re.search(r'class\s+([a-zA-Z0-9_]+)\s*(?:final)?\s*:\s*public\s+Manager', content)
        if match:
            class_name = match.group(1)
            # The manager name for registration is the lowercase class name
            manager_name = class_name.lower()
            return class_name, manager_name
    return None, None

def main(source_dir, target_file):
    managers = []
    package_dir = os.path.join(source_dir, 'src', 'packages')
    include_dir = os.path.join(source_dir, 'include', 'packages')

    for filename in os.listdir(package_dir):
        # Convention: manager files are not 'manager.cpp' or 'manager_factory.cpp'
        if filename.endswith('.cpp') and filename not in ['manager.cpp', 'manager_factory.cpp']:
            header_filename = filename.replace('.cpp', '.h')
            header_path = os.path.join(include_dir, header_filename)
            class_name, manager_name = get_manager_info(header_path)
            if class_name and manager_name:
                managers.append({
                    'header': header_filename,
                    'class_name': class_name,
                    'manager_name': manager_name
                })

    with open(target_file, 'w') as f:
        f.write('// This file is generated by cmake/generate_registrar.py. DO NOT EDIT.\n\n')
        f.write('#include "packages/manager_factory.h"\n')
        for manager in managers:
            f.write(f'#include "packages/{manager["header"]}"\n')

        f.write('\nnamespace {\n')
        for manager in managers:
            f.write(f'    static dev::packages::ManagerRegistrar<dev::packages::{manager["class_name"]}> '
                    f'{manager["manager_name"]}_registrar("{manager["manager_name"]}");\n')
        f.write('} // namespace\n')

if __name__ == '__main__':
    import sys
    if len(sys.argv) != 3:
        print("Usage: python generate_registrar.py <source_dir> <target_file>")
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
